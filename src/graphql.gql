# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProfileEntity {
  id: Int!
  userId: Int!
  firstName: String!
  lastName: String!
}

type UserEntity {
  id: Int!
  email: String!
  role: String!
  password: String
  profile: ProfileEntity
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DocEntity {
  id: String!
  title: String!
  content: String!
  userId: Int!
  categoryId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type CategoryEntity {
  id: String!
  name: String!
  createdBy: Int!
}

type CommentEntity {
  id: Int!
  content: String!
  docId: String!
  doc: DocEntity!
  userId: Int!
  user: UserEntity!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type SignInResult {
  user: UserEntity!
  accessToken: String!
  refreshToken: String!
}

type RefreshResult {
  refreshToken: String!
  accessToken: String!
}

type SubscriptionResult {
  userId: Int!
  doc: DocEntity!
}

type Query {
  me: UserEntity
  myDocs: [DocEntity!]
  getDocs: [DocEntity!]
  docDetails(id: String!): DocEntity
  getCategories: [CategoryEntity!]
  getComments(docId: String!): [CommentEntity!]
}

type Mutation {
  signUp(body: SignUpDto!): UserEntity!
  signIn(body: SignInDto!): SignInResult!
  refresh(body: RefreshDto!): RefreshResult!
  createDoc(body: CreateDocDto!): DocEntity!
  editDoc(body: EditDocDto!): SubscriptionResult!
  createCategory(body: CreateCategoryDto!): CategoryEntity!
  addComment(body: CreateCommentDto!): CommentEntity!
}

input SignUpDto {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInDto {
  email: String!
  password: String!
}

input RefreshDto {
  refreshToken: String!
}

input CreateDocDto {
  title: String!
  categoryId: String!
  content: String!
}

input EditDocDto {
  id: String!
  content: String!
}

input CreateCategoryDto {
  name: String!
}

input CreateCommentDto {
  content: String!
  docId: String!
}

type Subscription {
  doccontentedited(userId: Int!): SubscriptionResult!
  commentadded(docId: String!): CommentEntity!
}